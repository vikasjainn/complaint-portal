// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: proto/complaint.proto

package ComplaintService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComplaintServiceClient is the client API for ComplaintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComplaintServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error)
	SubmitComplaint(ctx context.Context, in *SubmitComplaintRequest, opts ...grpc.CallOption) (*Complaint, error)
	GetUserComplaints(ctx context.Context, in *GetUserComplaintsRequest, opts ...grpc.CallOption) (*GetUserComplaintsResponse, error)
	GetAdminComplaints(ctx context.Context, in *GetAdminComplaintsRequest, opts ...grpc.CallOption) (*GetAdminComplaintsResponse, error)
	ViewComplaint(ctx context.Context, in *ViewComplaintRequest, opts ...grpc.CallOption) (*Complaint, error)
	ResolveComplaint(ctx context.Context, in *ResolveComplaintRequest, opts ...grpc.CallOption) (*ResolveComplaintResponse, error)
}

type complaintServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComplaintServiceClient(cc grpc.ClientConnInterface) ComplaintServiceClient {
	return &complaintServiceClient{cc}
}

func (c *complaintServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) SubmitComplaint(ctx context.Context, in *SubmitComplaintRequest, opts ...grpc.CallOption) (*Complaint, error) {
	out := new(Complaint)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/SubmitComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) GetUserComplaints(ctx context.Context, in *GetUserComplaintsRequest, opts ...grpc.CallOption) (*GetUserComplaintsResponse, error) {
	out := new(GetUserComplaintsResponse)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/GetUserComplaints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) GetAdminComplaints(ctx context.Context, in *GetAdminComplaintsRequest, opts ...grpc.CallOption) (*GetAdminComplaintsResponse, error) {
	out := new(GetAdminComplaintsResponse)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/GetAdminComplaints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) ViewComplaint(ctx context.Context, in *ViewComplaintRequest, opts ...grpc.CallOption) (*Complaint, error) {
	out := new(Complaint)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/ViewComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *complaintServiceClient) ResolveComplaint(ctx context.Context, in *ResolveComplaintRequest, opts ...grpc.CallOption) (*ResolveComplaintResponse, error) {
	out := new(ResolveComplaintResponse)
	err := c.cc.Invoke(ctx, "/complaint.ComplaintService/ResolveComplaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComplaintServiceServer is the server API for ComplaintService service.
// All implementations must embed UnimplementedComplaintServiceServer
// for forward compatibility
type ComplaintServiceServer interface {
	Register(context.Context, *RegisterRequest) (*User, error)
	Login(context.Context, *LoginRequest) (*User, error)
	SubmitComplaint(context.Context, *SubmitComplaintRequest) (*Complaint, error)
	GetUserComplaints(context.Context, *GetUserComplaintsRequest) (*GetUserComplaintsResponse, error)
	GetAdminComplaints(context.Context, *GetAdminComplaintsRequest) (*GetAdminComplaintsResponse, error)
	ViewComplaint(context.Context, *ViewComplaintRequest) (*Complaint, error)
	ResolveComplaint(context.Context, *ResolveComplaintRequest) (*ResolveComplaintResponse, error)
	mustEmbedUnimplementedComplaintServiceServer()
}

// UnimplementedComplaintServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComplaintServiceServer struct {
}

func (UnimplementedComplaintServiceServer) Register(context.Context, *RegisterRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedComplaintServiceServer) Login(context.Context, *LoginRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedComplaintServiceServer) SubmitComplaint(context.Context, *SubmitComplaintRequest) (*Complaint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitComplaint not implemented")
}
func (UnimplementedComplaintServiceServer) GetUserComplaints(context.Context, *GetUserComplaintsRequest) (*GetUserComplaintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserComplaints not implemented")
}
func (UnimplementedComplaintServiceServer) GetAdminComplaints(context.Context, *GetAdminComplaintsRequest) (*GetAdminComplaintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminComplaints not implemented")
}
func (UnimplementedComplaintServiceServer) ViewComplaint(context.Context, *ViewComplaintRequest) (*Complaint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewComplaint not implemented")
}
func (UnimplementedComplaintServiceServer) ResolveComplaint(context.Context, *ResolveComplaintRequest) (*ResolveComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveComplaint not implemented")
}
func (UnimplementedComplaintServiceServer) mustEmbedUnimplementedComplaintServiceServer() {}

// UnsafeComplaintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComplaintServiceServer will
// result in compilation errors.
type UnsafeComplaintServiceServer interface {
	mustEmbedUnimplementedComplaintServiceServer()
}

func RegisterComplaintServiceServer(s grpc.ServiceRegistrar, srv ComplaintServiceServer) {
	s.RegisterService(&ComplaintService_ServiceDesc, srv)
}

func _ComplaintService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_SubmitComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).SubmitComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/SubmitComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).SubmitComplaint(ctx, req.(*SubmitComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_GetUserComplaints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserComplaintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).GetUserComplaints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/GetUserComplaints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).GetUserComplaints(ctx, req.(*GetUserComplaintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_GetAdminComplaints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminComplaintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).GetAdminComplaints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/GetAdminComplaints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).GetAdminComplaints(ctx, req.(*GetAdminComplaintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_ViewComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).ViewComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/ViewComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).ViewComplaint(ctx, req.(*ViewComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComplaintService_ResolveComplaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComplaintServiceServer).ResolveComplaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/complaint.ComplaintService/ResolveComplaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComplaintServiceServer).ResolveComplaint(ctx, req.(*ResolveComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComplaintService_ServiceDesc is the grpc.ServiceDesc for ComplaintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComplaintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "complaint.ComplaintService",
	HandlerType: (*ComplaintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ComplaintService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ComplaintService_Login_Handler,
		},
		{
			MethodName: "SubmitComplaint",
			Handler:    _ComplaintService_SubmitComplaint_Handler,
		},
		{
			MethodName: "GetUserComplaints",
			Handler:    _ComplaintService_GetUserComplaints_Handler,
		},
		{
			MethodName: "GetAdminComplaints",
			Handler:    _ComplaintService_GetAdminComplaints_Handler,
		},
		{
			MethodName: "ViewComplaint",
			Handler:    _ComplaintService_ViewComplaint_Handler,
		},
		{
			MethodName: "ResolveComplaint",
			Handler:    _ComplaintService_ResolveComplaint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/complaint.proto",
}
